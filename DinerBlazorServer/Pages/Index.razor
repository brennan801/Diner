@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using JCsDiner
@using Services
@inject SimulationHostedService SimService



<PageTitle>Index</PageTitle>

<div class="row">

    <div class="col-6">
        <label for="name">Simulation Name:</label>
        <input @bind=simName  type="text" min="1" placeholder="Simulation Name" required />
        <br />

        <label for="parties">Number of Parties:</label>
        <input @bind=parties name="parties" type="number" min="1" max="999" required />
        <br />

        <label for="waiters">Number of Waiters:</label>
        <input @bind=waiters name="waiters" type="number" min="1" max="99" required />
        <br />

        <label for="cooks">Number of Cooks:</label>
        <input @bind=cooks name="cooks" type="number" min="1" max="99" required/>
        <br />

        <label for="tables">Number of Tables:</label>
        <input @bind=tables name="tables" type="number" min="3" max="99" required />
        <br />

        <label for="partySize">Average Party Size:</label>
        <input @bind=partySize name="partySize" type="number" min="1" max="13" required />
        <br />

        <label for="entryTime">Average Party Entry Time:</label>
        <input @bind=entryTime name="entryTime" type="range" min="1" max="10"/>
        <br />

        <label for="eatingTime">Average Party Eat Time:</label>
        <input @bind=eatingTime name="eatingTime" type="range" min="4" max="14"/>
        <br />

        <button @onclick="simulate">Simulate</button>
    </div>
    <div class="col-2">
        <h3>Host</h3>
        <p>Host: @sim.HostPCQ.HostModel.State @if (sim.HostPCQ.HostModel.State == HostModel.States.SeatingParty) {<p>Party: @sim.HostPCQ.HostModel.PartyID</p> }</p>
        <h3>Waiters</h3>
        @foreach(WaiterModel waiter in sim.WaiterPCQ.WaiterModels)
        {
            <p>Waiter @waiter.ID: @waiter.State @if (waiter.State != WaiterModel.States.Free) { <p>Table: @waiter.PartyID</p> }</p>
        }
    </div>
    <div class="col-2">
        <h3>Current Parties</h3>
        @foreach(Party party in sim.Restaurant.CurrentParties)
        {
            <p>Party @party.ID: State - @party.State.Value , Size - @party.Customers</p>
        }
    </div>
    <div class="col-2">
        <h3>Cooks</h3>
        @foreach(CookModel cook in sim.CookPCQ.Cooks)
        {
            <p>Cook @cook.ID: @cook.State @if (cook.State == CookModel.States.Cooking) { <p>Order: @cook.OrderID</p> }</p>
        }
    </div>
</div>
<div class="row">
    <BECanvas Width="300" Height="400" @ref="_canvasReference" ></BECanvas>
</div>



<h3>Results:</h3>
<p>Simulation: @simResults.Name</p>
<p>Run Time: @simResults.Runtime</p>
<p>parties: @simResults.NumberOfCustomers</p>
<p>waiters: @simResults.NumberOfWaiters</p>
<p>cooks: @simResults.NumberOfCooks</p>
<p>tables: @simResults.NumberOfTables</p>
<p>avg party size: @simResults.ActualAveragePartySize</p>
<p>avg entry time: @simResults.AverageEntryTime</p>

@code{
    Simulator sim = new();
    string simName = "Simulation Name";
    int parties = 10;
    int waiters = 2;
    int cooks = 2;
    int tables = 6;
    int partySize = 4;
    int entryTime = 4;
    int eatingTime = 6;
    string result = "";
    SimulatorResults simResults = new();
    System.Threading.CancellationToken cancellationToken = new();
    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    private void Simulator_StateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    async Task simulate()
    {
        sim = SimService.Simulator;
        SimService.StateChanged += Simulator_StateChanged;
        SimulatorArguments simArgs = new()
        {
            Customers = parties,
            NumberOfWaiters = waiters,
            NumberOfCooks = cooks,
            NumberOfTables = tables,
            AveragePartySize = partySize,
            AveragePartyEntryTime = entryTime,
            AverageEatingTime = eatingTime
        };
        SimService.Arguments = simArgs;
        SimService.CanStart = true;
        try
        {
            System.Console.WriteLine("about to start");
            await SimService.StartAsync(cancellationToken);
            simResults = SimService.Results;
            System.Console.WriteLine("passed await");
        }
        catch(Exception e)
        {
            throw;
        }
        finally
        {
            System.Console.WriteLine("Finally");
        }
        System.Console.WriteLine("we got here!");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await this._context.ClearRectAsync(0, 0, 300, 400);
        await this._context.SetFillStyleAsync("black");

        await DrawTables();
        await DrawLobby();

        foreach(Party party in sim.Restaurant.CurrentParties)
        {
            if(party.State.Value != PartyState.States.WaitingInLobby)
            {

            }
        }

        int index = 0;
        foreach(CookModel cook in sim.CookPCQ.Cooks)
        {
            var yPos = 20 + (10 * index);
            await this._context.SetFillStyleAsync(getCookColor(cook));
            await this._context.FillRectAsync(200, yPos, 5, 5);
            index++;
        }

        //await this._context.SetFontAsync("10px serif");
        //await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 10);
    }

    public async Task DrawLobby()
    {
        int row = 0;
        var waitingPartyQuery =
            from party in sim.Restaurant.CurrentParties
            where party.State.Value == PartyState.States.WaitingInLobby
            select party;

        await this._context.SetFillStyleAsync("black");


        foreach( Party party in waitingPartyQuery)
        {
            int size = party.Customers;
            int fullRows = size / 4;
            int leftOver = size % 4;

            for(int i = 0; i < fullRows; i++)
            {
                int y = 10 + (4 * row);
                await this._context.FillRectAsync(0, y, 2, 2);
                await this._context.FillRectAsync(4, y, 2, 2);
                await this._context.FillRectAsync(8, y, 2, 2);
                await this._context.FillRectAsync(12, y, 2, 2);
                row++;
            }
            for(int i = 0; i < leftOver; i++)
            {
                int x = 4 * i;
                int y = 10 + (4 * row);
                await this._context.FillRectAsync(x, y, 2, 2);
            }
            if(size % 4 != 0)
            {
                row++;
            }
            row++;
        }
    }

    public async Task DrawTables()
    {
        int index = 0;
        foreach(Table table in sim.Restaurant.Tables)
        {
            var x = ((20 * index) % 80) + 30;
            int y = (25 * (index / 4)) + 10;
            var count = table.numOfTables;
            int w = 10 * count;

            await this._context.SetFillStyleAsync(getTableColor(table));
            await this._context.FillRectAsync(x, y, w, 20);

            index += count;
        }
    }

    public string getTableColor(Table table)
    {
        if (table.State == "clean") { return "black"; }
        else if(table.State == "occupied"){ return "blue"; }
        else return "red";
    }

    public string getCookColor(CookModel cook)
    {
        string color = "black";
        switch ((int)cook.State)
        {
            case 0:
                color = "green";
                break;
            case 1:
                color = "orange";
                break;
            default: 
                color = "black";
                break;
        }
        return color;
    }

    public async Task AddDots()
    {
         await this._context.SetFillStyleAsync("red");
         await this._context.FillRectAsync(8, 22, 2, 2);
    }
}
