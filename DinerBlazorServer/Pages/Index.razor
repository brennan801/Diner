@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using DinerBlazorServer.Data
@using JCsDiner
@using Services
@inject SimulationHostedService SimService
@inject DinerDbContext dbContext



<PageTitle>Index</PageTitle>

<div class="row align-items-center">

    <div class="col-6">
        <div class="py-1">
        <label for="name">Simulation Name:</label>
        <input @bind=simName  type="text" min="1" placeholder="Simulation Name" required />
        </div>

        <div class="py-1">
        <label for="parties">Number of Parties:</label>
        <input @bind=parties name="parties" type="number" min="1" max="999" required />
        </div>

        <div class="py-1">
        <label for="waiters">Number of Waiters:</label>
        <input @bind=waiters name="waiters" type="number" min="1" max="99" required />
        </div>

        <div class="py-1">
        <label for="cooks">Number of Cooks:</label>
        <input @bind=cooks name="cooks" type="number" min="1" max="99" required/>
        </div>

        <div class="py-1">
        <label for="tables">Number of Tables:</label>
        <input @bind=tables name="tables" type="number" min="3" max="99" required />
        </div>

        <div class="py-1">
        <label for="partySize">Average Party Size:</label>
        <input @bind=partySize name="partySize" type="number" min="1" max="13" required />
        </div>

        <div class="py-1">
        <label for="entryTime">Average Party Entry Time:</label>
        <input @bind=entryTime name="entryTime" type="range" min="1" max="10"/>
        </div>

        <div class="py-1">
        <label for="eatingTime">Average Party Eat Time:</label>
        <input @bind=eatingTime name="eatingTime" type="range" min="4" max="14"/>
        </div>

        <div class="py-3">
        <button @onclick="simulate">Simulate</button>
        </div>
    </div>
    <div class="col-6 rounded border border-5 border-dark align-items-center">
        <div class="row text-center">
            <h3 class="text-center">Previous Run's Results:</h3>
            <div class="col-6">
                <p>Simulation: @sim.Results.Name</p>
                <p>Run Time: @sim.Results.Runtime</p>
                <p>Parties: @sim.Results.NumberOfCustomers</p>
                <p>Waiters: @sim.Results.NumberOfWaiters</p>
            </div>
            <div class="col-6">
                <p>Cooks: @sim.Results.NumberOfCooks</p>
                <p>Tables: @sim.Results.NumberOfTables</p>
                <p>Avg Party Size: @sim.Results.ActualAveragePartySize</p>
                <p>Avg Entry Time: @sim.Results.AverageEntryTime</p>
            </div>
        </div>
        <div class="row justify-content-md-center">
            <div class="col-6 text-center">
                <button class="button" @onclick="saveRun">SaveRun</button>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-1">
        <h5 class="text-center">Lobby</h5>
    </div>
    <div class="col-1">
        <h5 class="text-center">Host</h5>
    </div>
    <div class="col-4">
        <h5 class="text-center">Dining Room</h5>
    </div>
    <div class="col-1">
        <h5 class="text-center">Waiters</h5>
    </div>
    <div class="col-1">
        <h5 class="text-center">Busser</h5>
    </div>
    <div class="col-2">
        <h5 class="text-center">Cooks</h5>
    </div>
</div>

<div class="row">
    <BECanvas Width="300" Height="100" @ref="_canvasReference" ></BECanvas>
</div>

@code{
    Simulator sim = new();
    string simName = "Simulation Name";
    int parties = 10;
    int waiters = 2;
    int cooks = 2;
    int tables = 6;
    int partySize = 4;
    int entryTime = 4;
    int eatingTime = 6;
    string result = "";
    SimulatorResults simResults = new();
    System.Threading.CancellationToken cancellationToken = new();
    List<DrawnTable> DrawnTables = new();
    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    private void Simulator_StateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task saveRun()
    {
        await dbContext.AddAsync(sim.Results);
        await dbContext.SaveChangesAsync();
    }

    public async Task simulate()
    {
        sim = SimService.Simulator;
        SimService.StateChanged += Simulator_StateChanged;
        SimulatorArguments simArgs = new()
        {
            Name = simName,
            Customers = parties,
            NumberOfWaiters = waiters,
            NumberOfCooks = cooks,
            NumberOfTables = tables,
            AveragePartySize = partySize,
            AveragePartyEntryTime = entryTime,
            AverageEatingTime = eatingTime
        };
        SimService.Arguments = simArgs;
        SimService.CanStart = true;
        try
        {
            await SimService.StartAsync(cancellationToken);
        }
        catch(Exception e)
        {
            System.Console.WriteLine(e);
            throw;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await this._context.ClearRectAsync(0, 0, 300, 400);
        await this._context.SetFillStyleAsync("black");

        await DrawTables();
        await DrawLobby();
        await DrawHost();
        await DrawSeatedParties();
        await DrawWaiters();
        await DrawBusser();
        await DrawCooks();

        //await this._context.SetFontAsync("10px serif");
        //await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 10);
    }

    public async Task DrawHost()
    {
        HostModel host = sim.HostPCQ.HostModel;

        if(host.State == HostModel.States.Free)
        {
            await this._context.SetFillStyleAsync("black");
            await this._context.FillRectAsync(35, 5, 3, 3);
        }
        else
        {
            int row = 0;
            await this._context.SetFillStyleAsync("blue");
            await this._context.FillRectAsync(35, 5, 3, 3);
            var assignedParty = sim.Restaurant.CurrentParties.First(p => p.State.Value == PartyState.States.BeingSeated);
            int size = assignedParty.Customers;
            int fullRows = size / 4;
            int leftOver = size % 4;

            for(int i = 0; i < fullRows; i++)
            {
                int y = 15 + (4 * row);
                await this._context.FillRectAsync(32, y, 2, 2);
                await this._context.FillRectAsync(36, y, 2, 2);
                await this._context.FillRectAsync(40, y, 2, 2);
                await this._context.FillRectAsync(44, y, 2, 2);
                row++;
            }
            for(int i = 0; i < leftOver; i++)
            {
                int x = (4 * i) + 32;
                int y = 15 + (4 * row);
                await this._context.FillRectAsync(x, y, 2, 2);
            }
        }


    }

    public async Task DrawBusser()
    {
        var busser = sim.BusserPCQ.Busser;
        if(busser.State == BusserModel.States.Free)
        {
            int x = 190;
            int y = 5;
            int w = 3;
            int h = 3;

            await this._context.SetFillStyleAsync("black");
            await this._context.FillRectAsync(x, y, w, h);
        }
        else
        {
            var assignedTable = DrawnTables.First(t => t.ID == busser.TableID);
            int x = (assignedTable.LeftPos + assignedTable.RightPos) / 2;
            int y = assignedTable.TopPos + 20;
            int w = 3;
            int h = 3;

            await this._context.SetFillStyleAsync("green");
            await this._context.FillRectAsync(x, y, w, h);
        }
    }

    public async Task DrawSeatedParties()
    {
        var seatedParties =
            from party in sim.Restaurant.CurrentParties
            where party.State.Value != PartyState.States.WaitingInLobby && party.State.Value != PartyState.States.BeingSeated
            select party;

        foreach(Party party in seatedParties)
        {
            var assignedTable = DrawnTables.First(t => t.ID == party.Table.ID);
            for(int i = 0; i < party.Customers; i++)
            {
                await this._context.SetFillStyleAsync(getPartyColor(party));
                await this._context.FillRectAsync(assignedTable.SeatPositions[i].x, assignedTable.SeatPositions[i].y, 2, 2);
            }
        }
    }

    public async Task DrawCooks()
    {
        int index = 0;
        foreach(CookModel cook in sim.CookPCQ.Cooks)
        {
            var yPos = 5 + (10 * index);
            await this._context.SetFillStyleAsync(getCookColor(cook));
            await this._context.FillRectAsync(220, yPos, 5, 5);
            index++;
        }
    }

    public async Task DrawWaiters()
    {
        var FreeWaiters =
            from waiter in sim.WaiterPCQ.WaiterModels
            where waiter.State == WaiterModel.States.Free
            select waiter;

        await this._context.SetFillStyleAsync("black");

        foreach(WaiterModel waiter in FreeWaiters)
        {
            int x = 165;
            int y = 5 + (waiter.ID * 4);
            int w = 3;
            int h = 3;

            await this._context.FillRectAsync(x, y, w, h);
        }

        var WorkingWaiters =
            from waiter in sim.WaiterPCQ.WaiterModels
            where waiter.State != WaiterModel.States.Free
            select waiter;

        foreach(WaiterModel waiter in WorkingWaiters)
        {
            var assignedTable = DrawnTables.First(t => t.ID == waiter.TableID);
            int x = (assignedTable.LeftPos + assignedTable.RightPos) / 2;
            int y = assignedTable.TopPos - 3;
            int w = 3;
            int h = 3;

            await this._context.SetFillStyleAsync(getWaiterColor(waiter));

            await this._context.FillRectAsync(x, y, w, h);
        }
    }

    public async Task DrawLobby()
    {
        int row = 0;
        var waitingPartyQuery =
            from party in sim.Restaurant.CurrentParties
            where party.State.Value == PartyState.States.WaitingInLobby
            select party;

        await this._context.SetFillStyleAsync("black");


        foreach( Party party in waitingPartyQuery)
        {
            int size = party.Customers;
            int fullRows = size / 4;
            int leftOver = size % 4;

            for(int i = 0; i < fullRows; i++)
            {
                int y = 5 + (4 * row);
                await this._context.FillRectAsync(2, y, 2, 2);
                await this._context.FillRectAsync(6, y, 2, 2);
                await this._context.FillRectAsync(10, y, 2, 2);
                await this._context.FillRectAsync(14, y, 2, 2);
                row++;
            }
            for(int i = 0; i < leftOver; i++)
            {
                int x = (4 * i) + 2;
                int y = 5 + (4 * row);
                await this._context.FillRectAsync(x, y, 2, 2);
            }
            if(size % 4 != 0)
            {
                row++;
            }
            row++;
        }
    }

    public async Task DrawTables()
    {
        int index = 0;
        foreach (Table table in sim.Restaurant.Tables)
        {
            var x = ((20 * index) % 80) + 65;
            int y = (30 * (index / 4)) + 5;
            var count = table.numOfTables;
            int w = 10 * count;

            if (!DrawnTables.Any(t => t.ID == table.ID))
            {
                DrawnTables.Add(new DrawnTable(table.ID, x, x + w, y, count));
            }
            else
            {
                DrawnTables.First<DrawnTable>(t => t.ID == table.ID);
                DrawnTables.Remove(DrawnTables.Where(t => t.ID == table.ID).First());
                DrawnTables.Add(new DrawnTable(table.ID, x, x + w, y, count));
            }

            await this._context.SetFillStyleAsync(getTableColor(table));
            await this._context.FillRectAsync(x, y, w, 20);

            index += count;
        }
    }

    public string getPartyColor(Party party)
    {
        switch ((int)party.State.Value)
        {
            case 0:
                return "black";
            case 1:
                return "blue";
            case 2: 
                return "#7CFC00";
            case 3:
                return "#7CFC00";
            case 4:
                return "green";
            case 5:
                return "yellow";
            case 6: 
                return "yellow";
            case 7:
                return "orange";
            case 8:
                return "pink";
            case 9: 
                return "red";
            case 10:
                return "black";
            default:
                return "black";
        }
    }

    public string getTableColor(Table table)
    {
        if (table.State == "clean") { return "black"; }
        else if(table.State == "occupied"){ return "blue"; }
        else return "red";
    }

    public string getCookColor(CookModel cook)
    {
        string color = "black";
        switch ((int)cook.State)
        {
            case 0:
                color = "green";
                break;
            case 1:
                color = "orange";
                break;
            default: 
                color = "black";
                break;
        }
        return color;
    }

    public string getWaiterColor(WaiterModel waiter)
    {
        switch ((int)waiter.State)
        {
            case 0:
                return "black";
            case 1:
                return "red";
            case 2: 
                return "yellow";
            case 3:
                return "green";
            default:
                return "black";
        }
    }
}
